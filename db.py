import os
import psycopg2
from psycopg2.extras import RealDictCursor
from dotenv import load_dotenv
import logging

# Charger les variables d'environnement
load_dotenv()

# Configuration de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class DatabaseConnection:
    def __init__(self):
        """
        Initialise la connexion √† la base de donn√©es Supabase
        """
        # URL de connexion Supabase
        self.database_url = os.getenv('DATABASE_URL') or \
                           "postgresql://postgres:[8A%/pB7^Kt2@db.bhtpxckpzhsgstycjiwb.supabase.co:5432/postgres?sslmode=require"
        
        # Param√®tres de connexion alternatifs (si vous pr√©f√©rez s√©parer les param√®tres)
        self.db_config = {
            'host': os.getenv('DB_HOST', 'db.bhtpxckpzhsgstycjiwb.supabase.co'),
            'database': os.getenv('DB_NAME', 'postgres'),
            'user': os.getenv('DB_USER', 'postgres'),
            'password': os.getenv('DB_PASSWORD', 'VOTRE_MOT_DE_PASSE'),
            'port': os.getenv('DB_PORT', '5432'),
            'sslmode': 'require'
        }
        
        self.connection = None
    
    def connect(self):
        """
        √âtablit la connexion √† la base de donn√©es
        """
        try:
            # M√©thode 1: Avec l'URL compl√®te
            self.connection = psycopg2.connect(
                self.database_url,
                cursor_factory=RealDictCursor  # Pour avoir des r√©sultats sous forme de dictionnaire
            )
            
            # Alternative - M√©thode 2: Avec les param√®tres s√©par√©s
            # self.connection = psycopg2.connect(**self.db_config, cursor_factory=RealDictCursor)
            
            logger.info("‚úÖ Connexion √† Supabase √©tablie avec succ√®s")
            return self.connection
            
        except psycopg2.Error as e:
            logger.error(f"‚ùå Erreur de connexion √† la base de donn√©es: {e}")
            raise e
    
    def disconnect(self):
        """
        Ferme la connexion √† la base de donn√©es
        """
        if self.connection:
            self.connection.close()
            logger.info("üîå Connexion ferm√©e")
    
    def get_cursor(self):
        """
        Retourne un curseur pour ex√©cuter des requ√™tes
        """
        if not self.connection:
            self.connect()
        return self.connection.cursor()
    
    def execute_query(self, query, params=None):
        """
        Ex√©cute une requ√™te SELECT et retourne les r√©sultats
        
        Args:
            query (str): Requ√™te SQL
            params (tuple): Param√®tres de la requ√™te (optionnel)
        
        Returns:
            list: R√©sultats de la requ√™te
        """
        try:
            with self.get_cursor() as cursor:
                cursor.execute(query, params)
                results = cursor.fetchall()
                return results
        except psycopg2.Error as e:
            logger.error(f"Erreur lors de l'ex√©cution de la requ√™te: {e}")
            raise e
    
    def execute_insert(self, query, params=None):
        """
        Ex√©cute une requ√™te INSERT/UPDATE/DELETE
        
        Args:
            query (str): Requ√™te SQL
            params (tuple): Param√®tres de la requ√™te (optionnel)
        
        Returns:
            int: Nombre de lignes affect√©es
        """
        try:
            with self.get_cursor() as cursor:
                cursor.execute(query, params)
                self.connection.commit()
                return cursor.rowcount
        except psycopg2.Error as e:
            self.connection.rollback()
            logger.error(f"Erreur lors de l'insertion: {e}")
            raise e

# Instance globale de la connexion
db = DatabaseConnection()

# Fonctions utilitaires pour une utilisation simple
def get_connection():
    """
    Retourne une connexion √† la base de donn√©es
    """
    return db.connect()

def close_connection():
    """
    Ferme la connexion globale
    """
    db.disconnect()

def test_connection():
    """
    Test la connexion √† la base de donn√©es
    """
    try:
        conn = get_connection()
        with conn.cursor() as cursor:
            cursor.execute("SELECT version();")
            version = cursor.fetchone()
            logger.info(f"üéâ Test r√©ussi ! Version PostgreSQL: {version[0]}")
            return True
    except Exception as e:
        logger.error(f"‚ùå Test de connexion √©chou√©: {e}")
        return False
    finally:
        close_connection()

# Exemple d'utilisation
if __name__ == "__main__":
    # Test de la connexion
    print("üîÑ Test de connexion √† Supabase...")
    if test_connection():
        
        # Cr√©er la table users si elle n'existe pas
        print("\nüìã Cr√©ation/v√©rification de la table users...")
        create_users_table()
        
        # Exemple de cr√©ation d'utilisateur
        try:
            print("\nüë§ Test de cr√©ation d'utilisateur...")
            new_user = create_user(
                username="test_user",
                email="test@example.com",
                password="password123",  # En production, hasher le mot de passe !
                full_name="Utilisateur Test"
            )
            print(f"Utilisateur cr√©√©: {new_user}")
            
            # Test de r√©cup√©ration
            user = get_user_by_email("test@example.com")
            print(f"Utilisateur r√©cup√©r√©: {user}")
            
        except ValueError as e:
            print(f"‚ÑπÔ∏è  {e}")  # Utilisateur d√©j√† existant
        except Exception as e:
            print(f"‚ùå Erreur: {e}")
    
    # Lister les tables
    try:
        # Lister les tables
        tables = db.execute_query("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public';
        """)
        print(f"\nüìã Tables disponibles: {[table['table_name'] for table in tables]}")
        
    except Exception as e:
        print(f"Erreur: {e}")
    finally:
        close_connection()
